{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PageBTN","showAll","this","props","react_default","a","createElement","className","showme","String","onClick","pageChange","Component","Item","_this$props","index","content","mark","whenClick","style","display","e","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","placeholder","text","list","handleInputChange","bind","assertThisInitialized","addTodo","handleItemClick","buildItem","listDate","window","localStorage","getItem","setState","JSON","parse","prevProps","prevState","setItem","stringify","objectSpread","target","value","_this$state","concat","toConsumableArray","getAttribute","clickOn","newList","splice","_this2","_this$state2","length","id","every","item","map","i","App_Item","key","_this$state3","type","onChange","App_PageBTN","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.862f2ddc.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport './App.css';\n\nclass PageBTN extends Component{\n  render(){\n    const {showAll}=this.props\n    return (\n      <div>\n        <span className='show-all' showme={ String(showAll) } onClick={this.props.pageChange}>All</span>\n        <span className='show-active' showme={ String(!showAll)} onClick={this.props.pageChange}>Active</span>\n      </div>\n    )\n  }\n}\n\nclass Item extends Component{\n  render(){\n    const {index,content,mark,showAll,whenClick}=this.props\n    return (\n      <div className=\"row-item\" style={!showAll&&mark ? {display:'none'}:null} \n        onClick={ (e) => {\n          whenClick(e,index)\n        }} >\n        { !mark  ?   \n          <div className=\"input-text\" >{content}</div> : \n          <div className=\"input-text\" mark=\"item-checked\" >\n            <del>{content}</del>\n          </div>\n        }\n        <div className=\"btn-delete\">－</div>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      input:{\n        'placeholder':'What needs to be done?',\n        'text':''\n      },\n      list:[\n        {content:'todo1',mark:false},\n        {content:'todo2',mark:true},\n        {content:'todo3',mark:true}\n      ],\n      showAll:true,\n    }\n\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.addTodo = this.addTodo.bind(this)\n    this.pageChange =this.pageChange.bind(this)\n    this.handleItemClick = this.handleItemClick.bind(this)\n    this.buildItem = this.buildItem.bind(this)\n  }\n\n  componentDidMount(){\n    const listDate = window.localStorage.getItem('todoListApp')\n    if (listDate){\n      this.setState({\n        list:JSON.parse(listDate)\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    //如果更改前的list 和現在的list不一樣（代表有更動資料）\n    if(prevState.list !== this.state.list){\n      window.localStorage.setItem('todoListApp',JSON.stringify(this.state.list))\n    }\n  }\n\n  handleInputChange(e){\n    this.setState({\n      input:{\n        ...this.state.input,\n        'text':e.target.value\n      }\n    })\n  }\n\n  addTodo(){\n    let {input,list} = this.state\n    if(!input.text){\n      this.setState({\n        input:{\n          'placeholder':'I need a name for the item...',\n          'text':''\n        }\n      })\n    }else{\n      this.setState({\n        input:{\n          'placeholder':'What needs to be done?',\n          'text':''\n        },\n        list:[\n          ...list,\n          {content:input.text,mark:false}\n        ]\n      })      \n    }\n  }\n\n  pageChange(e){\n    let dontChange = e.target.getAttribute('showme') //showme=true => clickOn current Page'btn\n    if( dontChange === 'false' ){\n      this.setState({\n        showAll:!this.state.showAll \n      })\n    }   \n  }\n\n  handleItemClick(e,index){\n    const clickOn = e.target\n    const {list} = this.state\n    let newList = [...list]     \n\n    //mark or delete\n    if( clickOn.className ==='btn-delete'){\n      newList.splice(index,1)\n    } else {\n      newList[index].mark= !newList[index].mark\n    }\n    this.setState({list:newList})\n  }\n\n  buildItem(){\n    const {list,showAll} = this.state\n    if(list.length === 0){\n      return <div id=\"noItem\"> Add some items </div>\n    }else if(!showAll && list.every(item => item.mark)){\n      return <div id=\"noItem\"> No active item </div>\n    }else{\n      return (\n        list.map((item,i)=>(\n          <Item key={i} showAll={showAll} index={i} content={item.content}\n              mark={item.mark} whenClick={this.handleItemClick}\n          />\n        ))\n      )      \n    }\n  }\n\n  render(){\n    const {input,list,showAll} = this.state\n    return(\n      <div>\n        <header>todos</header>\n        <div className=\"col-md-8 shadow rounded\">\n          <div className=\"row-addItem input-group \">\n            <input type=\"text\" className=\"form-control\" value={input.text}\n              placeholder={input.placeholder} onChange={this.handleInputChange}/>\n            <button id=\"btn-add\" className=\"btn btn-primary\" type=\"button\" onClick={this.addTodo} >＋</button>\n          </div>\n\n          <div className=\"listBlock\" >{this.buildItem()}</div>\n\n          <nav>\n            <span> {list.length} items left </span>\n            <PageBTN showAll={showAll} pageChange={this.pageChange} />\n          </nav>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}